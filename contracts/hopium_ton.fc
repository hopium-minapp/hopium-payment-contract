#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/workchain.fc";
#include "imports/jetton-utils.fc";

global slice owner_address;

() load_data() impure inline_ref {
    slice ds = get_data().begin_parse();
    owner_address = ds~load_msg_addr();
    ds.end_parse();
}

() save_data() impure inline_ref {
    set_data(
        begin_cell()
        .store_slice(owner_address)
        .end_cell() 
    );
}

() internal_transfer(slice _from, slice _to, int _jetton_amount, int _ton_amount, int _query_id, cell forward_payload) impure {
    cell transfer_msg =  begin_cell()
    .store_msg_flags_and_address_none(BOUNCEABLE)
    .store_slice(_from)
    .store_coins(_ton_amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
    .store_uint(1, 1)
    .store_ref(
        begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(_query_id, 64)
        .store_coins(_jetton_amount)
        .store_slice(_to)
        .store_slice(_to)
        .store_maybe_ref(null())
        .store_coins(1)
        .store_maybe_ref(forward_payload) 
      .end_cell()
    ).end_cell();
    send_raw_message(transfer_msg, SEND_MODE_PAY_FEES_SEPARATELY | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice in_msg_full_slice = in_msg_full.begin_parse();
    int msg_flags = in_msg_full_slice~load_msg_flags();
    slice sender_address = in_msg_full_slice~load_msg_addr();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    load_data();

    if(op == op::withdraw_jetton) {
        throw_unless(error::not_owner, equal_slices_bits(owner_address, sender_address));
        slice jetton_governed_address = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_uint(256);
        slice to_address = in_msg_body~load_msg_addr(); 
        int ton_amount = in_msg_body~load_coins();
        cell ref_cs = in_msg_body~load_ref(); 
        internal_transfer(jetton_governed_address,to_address,jetton_amount,ton_amount,query_id,ref_cs);
        save_data();
        return ();
    }

    if (op == op::transfer_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        cell ref_cs = in_msg_body~load_ref(); 
        slice ref_ds = ref_cs.begin_parse();
        int transferred_op = ref_ds~load_uint(32);
        return ();
    }

    if (op == op::upgrade) {
        throw_unless(error::not_owner, equal_slices_bits(owner_address, sender_address));
        cell new_code = in_msg_body~load_ref();
        set_code(new_code);
        return ();
    }

    if (op == op::top_up) {
        return ();
    }

    if (op == op::withdraw_ton) {
        throw_unless(error::not_owner, equal_slices_bits(owner_address, sender_address));
        int reverse_ton = in_msg_body~load_coins();
        raw_reserve(reverse_ton, 0);
        var msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender_address)
                    .store_coins(0)
                    .store_uint(0, 107)
                    .end_cell().send_raw_message(128);
        return();
    }

    throw(error::wrong_op);
}
